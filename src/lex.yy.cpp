// lex.yy.cpp generated by reflex 1.5.8 from lexerspec.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_outfile             "lex.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int Lexer::lex()
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Qif\\E))|((?:\\Q*\\E))|((?:\\Q=\\E))|([A-Z_a-z][0-9A-Z_a-z]*)|([0-9]+)|([\\x09\\x0a\\x0d\\x20])";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
#line 3 "lexerspec.l"
/* PATTERN */           /* ACTION */
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 3: (?:\Qif\E)
#line 3 "lexerspec.l"
return KEYWORD_IF;
            break;
          case 2: // rule at line 4: (?:\Q*\E)
#line 4 "lexerspec.l"
return OP_MUL;
            break;
          case 3: // rule at line 5: (?:\Q=\E)
#line 5 "lexerspec.l"
return OP_ASSIGN;
            break;
          case 4: // rule at line 6: [A-Z_a-z][0-9A-Z_a-z]*
#line 6 "lexerspec.l"
return ASCII_IDENTIFIER;
            break;
          case 5: // rule at line 7: [0-9]+
#line 7 "lexerspec.l"
return CONST_NUMBER;
            break;
          case 6: // rule at line 8: [\x09\x0a\x0d\x20]
#line 8 "lexerspec.l"
/* no action: ignore all white space */
            break;
        }
  }
}
