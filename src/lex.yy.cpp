// lex.yy.cpp generated by reflex 1.6.6 from lexerspec.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             yy::location
#define REFLEX_OPTION_YYSTYPE             yy::parser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  yy
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_exception           yy::parser::syntax_error(location(), "Unknown token.")
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_namespace           yy
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_token_eof           yy::parser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          yy::parser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "lexerspec.l"

    #include "parser.hpp"  /* Generated by bison. */
    #include "location.hpp" /* Generated by bison %locations. */


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace yy {

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual yy::location location(void) const
  {
    yy::location yylloc;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual yy::parser::symbol_type lex(void);
};

} // namespace yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 16 "lexerspec.l"
//%x ERROR


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

yy::parser::symbol_type yy::Lexer::lex()
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Qprint\\E))|((?:\\Qtrue\\E))|((?:\\Qfalse\\E))|((?:\\Qmoveif\\E))|((?:\\Qif\\E))|((?:\\Qelif\\E))|((?:\\Qelse\\E))|((?:\\Qwhile\\E))|((?:\\Qreturn\\E))|((?:\\Qstate\\E))|((?:\\Qentry\\E))|((?:\\Qexit\\E))|((?:\\Qon\\E))|((?:\\Qbreak\\E))|((?:\\Qdefevent\\E))|((?:\\Qint\\E))|((?:\\Qbool\\E))|((?:\\Qstring\\E))|((?:\\Q/*\\E)(?:.|\\n)*?(?:\\Q*/\\E))|([\\x09\\x0a\\x0c\\x0d\\x20])|((?:\\Q+\\E))|((?:\\Q;\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q,\\E))|((?:\\Q<\\E))|((?:\\Q>\\E))|((?:\\Q==\\E))|((?:\\Q=\\E))|([0-9]+)|([A-Z_a-z][0-9A-Z_a-z]*)|(\"(?:[^\"\\x5c]|\\\\\")*\")";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 54 "lexerspec.l"
return yy::parser::make_EOF(location());
                            throw yy::parser::syntax_error(location(), "Unknown token.");

            }
            else
            {
              throw yy::parser::syntax_error(location(), "Unknown token.");
            }
            break;
          case 1: // rule at line 20: (?:\Qprint\E) :
#line 20 "lexerspec.l"
return yy::parser::make_PRINT(str(), location());
            break;
          case 2: // rule at line 21: (?:\Qtrue\E) :
#line 21 "lexerspec.l"
return yy::parser::make_TRUE(str() == "true", location());
            break;
          case 3: // rule at line 22: (?:\Qfalse\E) :
#line 22 "lexerspec.l"
return yy::parser::make_FALSE(str() == "false", location());
            break;
          case 4: // rule at line 23: (?:\Qmoveif\E) :
#line 23 "lexerspec.l"
return yy::parser::make_MOVEIF(str(), location());
            break;
          case 5: // rule at line 24: (?:\Qif\E) :
#line 24 "lexerspec.l"
return yy::parser::make_IF(str(), location());
            break;
          case 6: // rule at line 25: (?:\Qelif\E) :
#line 25 "lexerspec.l"
return yy::parser::make_ELIF(str(), location());
            break;
          case 7: // rule at line 26: (?:\Qelse\E) :
#line 26 "lexerspec.l"
return yy::parser::make_ELSE(str(), location());
            break;
          case 8: // rule at line 27: (?:\Qwhile\E) :
#line 27 "lexerspec.l"
return yy::parser::make_WHILE(str(), location());
            break;
          case 9: // rule at line 28: (?:\Qreturn\E) :
#line 28 "lexerspec.l"
return yy::parser::make_RETURN(str(), location());
            break;
          case 10: // rule at line 29: (?:\Qstate\E) :
#line 29 "lexerspec.l"
return yy::parser::make_STATE(str(), location());
            break;
          case 11: // rule at line 30: (?:\Qentry\E) :
#line 30 "lexerspec.l"
return yy::parser::make_ENTRY(str(), location());
            break;
          case 12: // rule at line 31: (?:\Qexit\E) :
#line 31 "lexerspec.l"
return yy::parser::make_EXIT(str(), location());
            break;
          case 13: // rule at line 32: (?:\Qon\E) :
#line 32 "lexerspec.l"
return yy::parser::make_ON(str(), location());
            break;
          case 14: // rule at line 33: (?:\Qbreak\E) :
#line 33 "lexerspec.l"
return yy::parser::make_BREAK(str(), location());
            break;
          case 15: // rule at line 34: (?:\Qdefevent\E) :
#line 34 "lexerspec.l"
return yy::parser::make_DEFEVENT(str(), location());
            break;
          case 16: // rule at line 35: (?:\Qint\E) :
#line 35 "lexerspec.l"
return yy::parser::make_INT(str(), location());
            break;
          case 17: // rule at line 36: (?:\Qbool\E) :
#line 36 "lexerspec.l"
return yy::parser::make_BOOL(str(), location());
            break;
          case 18: // rule at line 37: (?:\Qstring\E) :
#line 37 "lexerspec.l"
return yy::parser::make_STRING(str(), location());
            break;
          case 19: // rule at line 38: (?:\Q/*\E)(?:.|\n)*?(?:\Q*/\E) :
#line 38 "lexerspec.l"
/* no action: ignore all multi-line comments */;
            break;
          case 20: // rule at line 39: [\x09\x0a\x0c\x0d\x20] :
#line 39 "lexerspec.l"
/* no action: ignore all white space */;
            break;
          case 21: // rule at line 40: (?:\Q+\E) :
#line 40 "lexerspec.l"
return yy::parser::make_PLUS(str(), location());
            break;
          case 22: // rule at line 41: (?:\Q;\E) :
#line 41 "lexerspec.l"
return yy::parser::make_SEMI(str(), location());
            break;
          case 23: // rule at line 42: (?:\Q{\E) :
#line 42 "lexerspec.l"
return yy::parser::make_LEFT_BRACE(str(), location());
            break;
          case 24: // rule at line 43: (?:\Q}\E) :
#line 43 "lexerspec.l"
return yy::parser::make_RIGHT_BRACE(str(), location());
            break;
          case 25: // rule at line 44: (?:\Q(\E) :
#line 44 "lexerspec.l"
return yy::parser::make_LEFT_PAREN(str(), location());
            break;
          case 26: // rule at line 45: (?:\Q)\E) :
#line 45 "lexerspec.l"
return yy::parser::make_RIGHT_PAREN(str(), location());
            break;
          case 27: // rule at line 46: (?:\Q,\E) :
#line 46 "lexerspec.l"
return yy::parser::make_COMMA(str(), location());
            break;
          case 28: // rule at line 47: (?:\Q<\E) :
#line 47 "lexerspec.l"
return yy::parser::make_LESS(str(), location());
            break;
          case 29: // rule at line 48: (?:\Q>\E) :
#line 48 "lexerspec.l"
return yy::parser::make_GREATER(str(), location());
            break;
          case 30: // rule at line 49: (?:\Q==\E) :
#line 49 "lexerspec.l"
return yy::parser::make_EQUAL(str(), location());
            break;
          case 31: // rule at line 50: (?:\Q=\E) :
#line 50 "lexerspec.l"
return yy::parser::make_ASSIGN(str(), location());
            break;
          case 32: // rule at line 51: [0-9]+ :
#line 51 "lexerspec.l"
return yy::parser::make_INT_NUMBER(atoi(text()), location());
            break;
          case 33: // rule at line 52: [A-Z_a-z][0-9A-Z_a-z]* :
#line 52 "lexerspec.l"
return yy::parser::make_IDENTIFIER(str(), location());
            break;
          case 34: // rule at line 53: "(?:[^"\x5c]|\\")*" :
#line 53 "lexerspec.l"
return yy::parser::make_STRING_VAL(str(), location());
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 58 "lexerspec.l"

/*
int main(int argc, char **argv)
{
    FILE *fd = stdin;
    if (argc > 1 && (fd = fopen(argv[1], "r")) == NULL)
        exit(EXIT_FAILURE);
    std::ofstream of("output.txt", std::ofstream::out);
    if (!of)
        exit(EXIT_FAILURE);
    yy::Lexer lexer(fd, of);
    yy::parser parser(lexer);
    if (parser.parse() != 0) {}
    of.close();
    if (fd != stdin)
        fclose(fd);
    return 0;
}
*/
